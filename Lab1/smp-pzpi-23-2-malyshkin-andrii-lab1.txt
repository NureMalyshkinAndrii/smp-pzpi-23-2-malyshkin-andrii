                        МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
 
              ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ




                           Кафедра Програмної інженерії




                                        Звіт

                             з лабораторної роботи № 1

                    з дисципліни: «Скриптові мови програмування»




Виконав:                                                                  Перевірив:

ст. гр. ПЗПІ-23-2                                                  ст. викл. каф. ПІ

Малишкін А. С.                                                        Сокорчук І. П.




                                   Харків – 2025

                               Лабороторна робота №1
                                                                                      2
1.1 Мета роботи


          Ознайомитися з базовими командами Bash для обробки файлів і текстової
   інформації, зокрема з командами select, ls, awk, sort, uniq, tee, cat, sed, iconv та
   іншими. Навчитися їх практичному застосуванню. Розробити Bash-скрипт, який
   конвертує розклад занять у форматі CSV у формат, сумісний для імпорту до
   Google Календаря.




1.2 Постановка задачі


          Необхідно     створити   Bash-скрипт    для   обробки    розкладу    занять,
   експортованого з сайту https://cist.nure.ua у форматі CSV, для всіх груп певного
   потоку. Скрипт має конвертувати цей файл у формат CSV, придатний для імпорту
   в Google Календар.

          Скрипт повинен підтримувати такі ключі:

      •   help — виводить довідкову інформацію про використання програми та
          завершує її з кодом успішного виконання;

      •   version — відображає поточну версію програми та завершує виконання з
          успіхом;

      •   q або quiet — приглушує виведення інформації у стандартний потік,
          забезпечуючи «тихий» режим роботи.

          Скрипт має приймати наступні аргументи: шлях до CSV-файлу та
   опціонально назву академічної групи перед шляхом до файлу. Якщо аргументи не
   передані, скрипт має відобразити меню вибору за допомогою команди select,
   сформувавши відсортований за датою список доступних CSV-файлів у поточній
   директорії, що відповідають шаблону TimeTable_??_??_20??.csv.
                                                                         3
     Після вибору файлу скрипт відкриває його, генерує список академічних
груп, сортує їх в алфавітному порядку й виводить меню вибору групи за
допомогою select.

     Правила обробки даних у файлі:

         •   Поле "Subject" формується з колонки "Тема", при цьому назва групи та
             дефіс на початку видаляються. До кінця додається крапка з комою та
             номер пари. Для лабораторних занять враховується, що вони тривають
             дві пари, а інші — одну.

         •   Дані для колонок "Start Date", "Start Time", "End Date", "End Time"
             беруться з відповідних полів "Дата начала", "Время начала", "Дата
             завершения", "Время завершения" і перетворюються у формат,
             сумісний з Google Календарем (американський формат дати і часу).

         •   Колонка "Description" копіюється з поля "Описание".

         •   Вихідний CSV має таку послідовність стовпців: "Subject", "Start Date",
             "Start Time", "End Date", "End Time", "Description".

     Результати мають бути виведені у стандартний потік виводу, якщо не
активовано "тихий режим" (q або quiet). Також створюється файл із результатом,
назва якого включає назву вхідного файлу з префіксом Google_.

     Обробка помилок:

         • Якщо файл не знайдено або недоступний для читання — вивести
             повідомлення про помилку в стандартний потік помилок і завершити
             скрипт з відповідним кодом.

         • Якщо обрана група не знайдена — повідомити користувача та
             запропонувати інший вибір.
                                                                     4
        • Якщо група не вказана, але у файлі є лише одна — обробити її
            автоматично.

        • У випадку помилок при обробці даних — вивести повідомлення і
            завершити роботу з помилковим кодом.

     Файл скрипту повинен мати права на виконання для всіх користувачів, але
дозволи на редагування лише для власника.




     1.3 Хід роботи

     Створимо скрипт. На початку обробляємо аргументи командного рядка:

        • --version     - виводить версію програми
        • --help     - виводить довідкову інформацію
        • -q   або   --quiet   - вимикає виведення результату в стандартний потік
            виводу

     Визначаємо вхідний файл та групу студентів, використовуючи параметри
командного рядка або інтерактивний вибір. Для другого використовується
функція choose_option, яка створює меню вибору для файлів та груп:

        •   Використовує команду select для створення інтерактивного меню
        • Повертає 0 при успішному виборі елемента
        • Повертає 1 при виборі опції "quit"

     Якщо файл не вказано в параметрах, скрипт шукає CSV-файли з назвами
формату "TimeTable_??_??_20??.csv" і пропонує вибрати один з них. Шаблон
"TimeTable_??_??_20??.csv" використовує символи ? як заповнювачі для будь-
якого символу, що дозволяє знайти файли розкладу з різними датами.

     Далі перевіряємо існування файлу та права на читання.

     Обробляємо вмісту файлу:
                                                                           5
        • Зчитуємо вміст файлу та виконує перетворення кодування з CP1251 у
            UTF-8
        •   Видаляємо символи повернення каретки ("\r")

     Регулярний вираз    's/\r/\n/g'   замінює символи повернення каретки на
символи нового рядка.


     Далі необхідно визначити доступні в розкладі групи. Використовуємо
команду awk для витягнення груп з файлу розкладу:

        •   Обробляємо рядки після заголовка (NR   > 1)

        •   Розбиваємо перше поле за розділювачем "   - "

        • Витягуємо назву групи

     Регулярний вираз   FPAT='[^,]*|"[^"]*"'   використовується для коректного
розділення CSV полів з урахуванням лапок.

     Якщо група не вказана в параметрах:

        • Підраховуємо кількість знайдених груп
        • Якщо група лише одна, вибираємо її автоматично
        • Інакше пропонуємо інтерактивний вибір

     Перевіряємо чи вказана група присутня у файлі за допомогою grep   -q.


     Знову використовуємо потужний засіб awk для:

        • Створення заголовка для Google Календаря
        • Фільтрації рядків, що відповідають вибраній групі
        • Форматування дат і часу
        • Підрахунку порядкових номерів для кожного заняття
        • Формування вихідних рядків

     Основні регулярні вирази у секції awk:
                                                                               6
         • group_pattern="^\"$student_group - "     – шаблон для пошуку рядків,
             що починаються з назви групи
         • gsub(group_pattern "|^\"|\"$", "", subject)       – видаляє з поля назви
             групи, початкові та кінцеві лапки


     Функції форматування дати та часу в awk коді:

         •   format_date – перетворює дату з формату "DD.MM.YYYY" в формат
             "MM/DD/YYYY"
         •   format_time – перетворює час з 24-годинного формату в 12-годинний з
             AM/PM

     Результат зберігаємо у файлі з префіксом "Google_" та виводимо в
стандартний потік виводу, якщо не вказано опцію       -q   або –quiet. Команда tee
використовується для одночасного виведення результату на екран та в файл.




      1.4 Висновки


     Скрипт демонструє типовий підхід до обробки текстових даних у Bash з
використанням утиліт командного рядка, таких як awk, sed, iconv, sort, uniq, tee та
інших. Він успішно перетворює дані з формату CIST у формат, придатний для
імпорту в Google Календар.
                                                                            7
                              ДОДАТОК А

                    Повний текст розробленого сценарію

001 #!/bin/bash
002
003 if [ "$1" = "--version" ]; then
004     echo 'CIST-to-Google 1.0'
005     exit 0
006 fi
007
008 if [ "$1" = "--help" ]; then
009     echo "Usage: $0 [--help | --version] | [-q|--quiet] [[group]
schedule.csv]"
010     echo 'Convert a CIST schedule CSV file into Google Calendar for-
mat'
011     echo 'The result will be saved in current directory in a file
named "Google_"'
012     echo 'Also the result will be printed to stdout unless -q or --
quiet option is used'
013     echo -e " --help \t\tPrint help message and exit"
014     echo -e " --version \t\tPrint version info and exit"
015     echo -e " -q, --quiet \t\tDo not print the result to stdout"
016     echo -e " group \t\tOptional group name"
017     echo -e " schedule.csv \t\tCSV file to process"
018     exit 0
019 fi
020
021 output_fd=1
022 if [ "$1" = "-q" -o "$1" = "--quiet" ]; then
023     output_fd=/dev/null
024     shift
025 fi
026
027 student_group=""
028 input_file=""
029 if [ $# -eq 2 ]; then
030     student_group="$1"
031     input_file="$2"
032 elif [ $# -eq 1 ]; then
033     input_file="$1"
034 fi
035
036 available_files=$(ls TimeTable_??_??_20??.csv 2>/dev/null | sort)
037
038 choose_option(){
039
040     select item in quit $1; do
041         if [ "$item" = "" ]; then
042              continue
043         elif [ "$item" = "quit" ]; then
044              return 1
045         else
046              echo "$item"
                                                                              8
047               return 0
048           fi
049      done
050 }
051
052 if [ -z "$input_file" ]; then
053      input_file=$(choose_option "$available_files") || exit 0
054 fi
055
056 if [ ! -f "$input_file" ]; then
057      echo "Error: file '$input_file' is not exist." >&2
058      exit 1
059 fi
060
061 if [ ! -r "$input_file" ]; then
062      echo "Error: permission to read file '$input_file' denied." >&2
063      exit 2
064 fi
065
066 file_content=$(cat "$input_file" | sed 's/\r/\n/g' | iconv -f cp1251
-t utf8)
067
068 available_groups=$(
069      echo "$file_content" \
070      | awk -v FPAT='[^,]*|"[^"]*"' '
071       NR > 1 {
072         gsub(/^"/, "", $1);
073         if (split($1, parts, " - ") != 1) print parts[1]
074       }
075      ' | sort | uniq
076 )
077
078 if [ -z "$student_group" ]; then
079      group_count=$(echo "$available_groups" | wc -l)
080      if [ "$group_count" -eq 1 ]; then
081           student_group=$(echo "$available_groups")
082      else
083           student_group=$(choose_option "$available_groups") || exit 0
084      fi
085 fi
086
087 if ! echo "$available_groups" | grep -q "$student_group"; then
088      echo "No '$student_group' group in '$input_file'."
089      student_group=$(choose_option "$available_groups") || exit 0
090 fi
091
092 echo "$file_content" \
093 | awk -v FPAT='[^,]*|"[^"]*"' -v group_pattern="$([ -n
"$student_group" ] && echo "^\"$student_group - ")" '
094      BEGIN {
095           print "Subject,Start Date,Start Time,End Date,End Time,De-
scription"
096      }
097
098      function format_time(time_str) {
                                                                         9
099         gsub(/:|"/, " ", time_str)
100         return strftime("%I:%M %p", mktime("1970 01 01" time_str))
101     }
102
103     function format_date(date_str) {
104         gsub(/"/, "", date_str)
105         split(date_str, date_parts, ".")
106         return strftime("%m/%d/%Y", mktime(date_parts[3] " "
date_parts[2] " " date_parts[1] " 00 00 00"))
107     }
108
109     NR > 1 && $1 ~ group_pattern {
110         subject = $1
111         gsub(group_pattern "|^\"|\"$", "", subject)
112
113         start_date = format_date($2)
114         start_time = format_time($3)
115         end_date = format_date($4)
116         end_time = format_time($5)
117         description = $12
118
119         class_count[$2]++
120
121         print "\"" subject "; №" class_count[$2] "\"," start_date ","
start_time "," end_date "," end_time "," description
122 }
123 ' | tee "Google_$(basename "$input_file")" >&$output_fd