Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Катедра програмної інженерії

ЗВІТ
з лабораторної роботи № 4
з дисципліни «Скриптові мови програмування»
на тему: «Структурування коду, робота з формами, автентифікація та авторизація»

Виконав
ст. гр. ПЗПІ-23-2
Малишкін Андрій Сергійович

Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович

Харків 2025


4 СТРУКТУРУВАННЯ КОДУ, РОБОТА 3 ФОРМАМИ, АВТЕНТИФІКАЦІЯ ТА АВТОРИЗАЦІЯ


1 ІСТОРІЯ ЗМІН

№ 	Дата	       Версія звіту   	Опис змін та виправлень
1 	03.06.2025     0.1	        Створено розділи «Історія змін», «Завдання», «Опис виконаної роботи», «Висновки», оформлено додатки


2 ЗАВДАННЯ

У рамках лабораторної роботи потрібно реалізувати покращення структури та функціоналу веб-сайту шляхом усунення дублювання коду в шапці та підвалі сторінок 
через виділення їх в окремі файли і підключення через центральний скрипт, який відповідає за маршрутизацію між різними сторінками сайту. Важливо також додати 
механізм авторизації користувачів, що передбачає створення сторінки входу з формою для введення логіна та пароля, а також обмеження доступу до контенту сайту 
для неавторизованих відвідувачів, із використанням сесій для збереження інформації про користувача.
Додатково необхідно розробити сторінку профілю користувача, де буде можливість переглянути і редагувати особисту інформацію, а також завантажити фото. 
При цьому дані профілю зберігатимуться у вигляді масиву у окремому файлі, а форма редагування повинна перевіряти коректність введених даних, зокрема вік користувача, 
довжину текстових полів і тип завантаженого зображення. Ця робота спрямована на навчання масштабуванню коду, роботі з формами, обробці файлів та реалізації базових 
механізмів авторизації та контролю доступу.


3 ОПИС ВИКОНАНОЇ РОБОТИ

Файл index.php реалізує централізовану систему маршрутизації, яка усуває дублювання коду шапки та підвалу сайту. 
Замість традиційної конструкції switch використовується сучасний оператор match (доступний з PHP 8.0), який має кілька важливих переваг: 
строга перевірка типів, автоматичне повернення значення без необхідності використання break, та більш компактний синтаксис. 
Match також безпечніший, оскільки кидає виняток при відсутності відповідного варіанту, що запобігає тихим помилкам.
Структура файлу забезпечує чітке розділення відповідальності: спочатку ініціалізується сесія та база даних, потім перевіряється авторизація користувача, 
після чого обробляються POST-запити через окремі обробники, і нарешті відображається відповідна сторінка між загальною шапкою та підвалом. 
Такий підхід значно покращує підтримуваність коду, оскільки зміни в дизайні потребують редагування лише двох файлів (header.php та footer.php), 
а логіка обробки запитів винесена в окремі модулі, що робить код більш організованим та легшим для розуміння.      

25  if ($_SERVER['REQUEST_METHOD'] === 'POST') {                        
26      match ($page) {                                                 
27          'login'   => require_once 'logic/auth_handler.php',         
28          'products'=> require_once 'logic/product_handler.php',      
29          'cart'    => require_once 'logic/cart_handler.php',         
30          'profile' => require_once 'logic/profile_handler.php',      
31          default   => null,                                          
32      };                                                              
33  }                                                                   
34                                                                      
35  include 'includes/header.php';                                      
36                                                                      
37  match ($page) {                                                     
38      'home'     => require_once 'pages/home.php',                    
39      'products' => require_once 'pages/products.php',                
40      'cart'     => require_once 'pages/cart.php',                    
41      'profile'  => require_once 'pages/profile.php',                 
42      'login'    => require_once 'pages/login.php',                   
43      '404'      => require_once 'pages/page404.php',                 
44      default    => require_once 'pages/page404.php',                 
45  };                                                                  
46                                                                      
47  include 'includes/footer.php';             
	
У проекті використовується SQLite база даних з реалізацією патерну Singleton для класу Database, що забезпечує єдине підключення протягом всього життєвого циклу додатку 
та економить ресурси. SQLite обрано як легке рішення, яке не потребує окремого сервера баз даних та ідеально підходить для навчальних проектів та невеликих додатків. 
Архітектура побудована з окремими моделями для кожної сутності (User, Product, Profile, Cart), що забезпечує чітке розділення логіки роботи з даними та спрощує підтримку коду.
Кожна модель інкапсулює власну логіку роботи з базою даних, використовуючи підготовлені запити (prepared statements) для захисту від SQL-ін'єкцій та забезпечення безпеки. 

База даних автоматично ініціалізується при першому запуску з створенням необхідних таблиць та заповненням тестовими даними через метод seedProducts(). 
Такий підхід забезпечує масштабованість, безпеку та легкість розширення функціоналу - додавання нових сутностей потребує лише створення відповідної моделі 
без зміни існуючого коду. Використання зовнішніх ключів та каскадного видалення гарантує цілісність даних та автоматичне очищення пов'язаних записів.

Клас Database реалізує патерн Singleton, що гарантує існування лише одного екземпляра підключення до бази даних протягом всього життєвого циклу додатку. 
Він відповідає за автоматичне створення директорії для бази даних, встановлення з'єднання з SQLite, а також ініціалізацію схеми через методи createTables() та seedProducts(). 

Клас забезпечує централізоване управління підключенням з автоматичним закриттям з'єднання в деструкторі, що запобігає витокам ресурсів. Метод initializeDatabase() 
виконує повну настройку бази даних з створенням таблиць для користувачів, профілів, продуктів та кошика покупок, а також заповнює таблицю продуктів початковими даними.

Клас User інкапсулює всю логіку роботи з користувачами, включаючи автентифікацію, реєстрацію та пошук користувачів. Метод authenticate() забезпечує безпечну перевірку паролів 
через функцію password_verify(), що працює з хешованими паролями, створеними за допомогою password_hash(). При створенні нового користувача через метод create() 
автоматично створюється відповідний запис у таблиці профілів, що забезпечує цілісність даних. Клас надає методи для пошуку користувачів за ім'ям та ID, а також 
геттери для отримання основної інформації про користувача, дотримуючись принципів інкапсуляції.

Клас Product реалізує простий інтерфейс для роботи з товарами в системі. Статичний метод getAll() повертає повний список всіх доступних продуктів, відсортованих за ID. 
Незважаючи на мінімальну функціональність у поточній версії, клас підготовлений для розширення - він містить приватні властивості для зберігання даних про продукт 
та конструктор з підключенням до бази даних. Така архітектура дозволяє легко додавати нові методи для створення, редагування та видалення товарів без зміни існуючого коду.

Клас Profile управляє додатковою інформацією про користувачів, такою як ім'я, прізвище, дата народження, біографія та фотографія. Він реалізує гнучку систему 
оновлення профілів через метод update(), який автоматично визначає, чи потрібно створювати новий запис або оновлювати існуючий. Клас надає зручні геттери для 
отримання даних, включаючи метод getFullName() для формування повного імені. Окрема обробка завантаження фотографій через параметр photoPath дозволяє зберігати 
профілі як з фото, так і без них, забезпечуючи гнучкість у використанні.

Клас Cart реалізує повнофункціональний кошик покупок з прив'язкою до конкретного користувача через userId. Метод getItems() використовує JOIN для об'єднання даних 
з таблиць кошика та продуктів, повертаючи розширену інформацію про товари включно з розрахованою загальною вартістю. Метод addItem() інтелектуально обробляє 
додавання товарів - якщо товар вже існує в кошику, збільшує його кількість, інакше створює новий запис. Використання UNIQUE constraint на комбінацію user_id 
та product_id на рівні бази даних запобігає дублюванню записів та забезпечує цілісність даних кошика.

Клас Auth реалізує централізовану систему автентифікації з використанням PHP-сесій для збереження стану користувача. Система працює за принципом "логін або реєстрація" - 
якщо користувач з введеним логіном не існує, він автоматично реєструється з наданим паролем, що спрощує процес входу для нових користувачів. Для перевірки автентифікації 
використовується комбінація трьох сесійних змінних (user_id, username, login_time), а поточний користувач кешується в статичній змінній для оптимізації продуктивності. 
Метод getCurrentUserProfile() забезпечує зручний доступ до об'єднаної інформації з таблиць користувачів та профілів, повертаючи повний набір даних про поточного 
користувача. Logout виконує повне очищення сесії з перенаправленням на сторінку входу, забезпечуючи безпечне завершення роботи.

auth_handler.php - oбробка автентифікації. Обробник автентифікації реалізує комплексну валідацію форми входу з перевіркою мінімальної довжини логіна (3 символи) 
та паролю (6 символів). Логіка роботи передбачає автоматичну реєстрацію нових користувачів - якщо користувач з введеним логіном не існує, система створює новий 
акаунт з наданим паролем. Обробник надає детальні повідомлення про помилки, розрізняючи випадки невірного пароля для існуючого користувача та помилки створення 
нового акаунту, після успішної автентифікації перенаправляє користувача на сторінку продуктів.

product_handler.php - yправління кошиком з каталогу. Обробник продуктів працює з масивом кількостей товарів, що дозволяє додавати декілька позицій до кошика 
одночасно. Він виконує валідацію чисельних значень, перевіряючи що кількість є позитивним числом, та ігнорує порожні або некоректні поля. Система працює за 
принципом "все або нічого" - якщо хоча б одна позиція має валідну кількість, всі валідні товари додаються до кошика з автоматичним перенаправленням на 
сторінку кошика, інакше відображається повідомлення про помилку.

cart_handler.php - yправління кошиком покупок. Обробник кошика реалізує функціональність видалення товарів через POST-запити з ідентифікатором товару. 
Логіка максимально проста та безпечна - отримує ID товару з форми, перетворює його на ціле число для захисту від ін'єкцій, та викликає метод removeItem() 
відповідного об'єкта кошика. Після успішного видалення відбувається перенаправлення на ту ж сторінку кошика для оновлення відображення.

profile_handler.php - розширена обробка профілю. Обробник профілю реалізує валідацію з перевіркою всіх полів форми: мінімальної довжини імені та прізвища 
(2 символи), мінімального віку користувача (16 років) через розрахунок різниці дат, та мінімальної довжини біографії (50 символів). Окрема увага приділена 
обробці завантаження файлів - система перевіряє тип файлу (дозволені JPEG, PNG, GIF, WebP), розмір (максимум 5MB), створює унікальне ім'я файлу з часовою 
міткою та зберігає у структурованій директорії uploads/profiles/. Всі помилки валідації накопичуються в масиві та відображаються користувачеві, а успішне 
збереження супроводжується підтверджуючим повідомленням.


3 ВИСНОВКИ

Реалізовано повнофункціональний веб-додаток з сучасною архітектурою, що включає централізовану маршрутизацію через index.php з використанням оператора match замість застарілого switch. Система автентифікації побудована на PHP-сесіях з автоматичною реєстрацією користувачів та безпечним хешуванням паролів. База даних організована з окремими моделями для кожної сутності, використовуючи SQLite та патерн Singleton для оптимального управління з'єднанням.
Усунено дублювання коду задяки централізованій системі компонування коду, реалізовано захист від несанкціонованого доступу та створено повнофункціональний профіль користувача з валідацією даних та завантаженням файлів. Архітектура забезпечує легку масштабованість, безпеку через підготовлені SQL-запити та зручність підтримки завдяки чіткому розділенню відповідальності між компонентами системи.


ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/EyA8cXloZ3s

00:00 - Вступ
Представлення студента та теми лабораторної роботи.

00:11 - Центральний файл - index.php
Розгляд точки входу яка відповідає за під'єднання логіки і компонування сторінок.

01:37 - Робота з базою даних
Розгляд Singleton класу Database.

02:15 - Класи моделей
Розгляд класів Product, User, Cart, Profile, які відповідають за роботу з базою даних по конкретній сутності.

3:14 - Класс Auth
Розгляд системи автентифікації та авторизації, яка комбінує роботу з базою даних та сесіями.

4:18 - Обробники форм
Розгляд файлів auth/product/card/profile_handler.php які відповідають за обробку html-форм.

06:42 - Демонстрація роботи програми
Практичний показ функціонування додатку, реєстрація, редагування профілю.


Додаток Б
Вихідний код

run
1       #!/bin/bash
2       php -S localhost:8080

index.php
1       <?php
2       header("Location: home.php");
3       exit;

home.php
01      <?php
02      session_start();
03      include 'includes/header.php';
04      ?>
05
06      <h1 class="text-2xl font-bold text-center mt-40">Ласкаво просимо до продовольчого магазину «Весна»</h1>
07      <p class="text-center mt-4 text-gray-600">
08          Оберіть 
09          <a href="products.php" class="text-green-600 underline">товари</a> 
10          для покупки або перегляньте 
11          <a href="cart.php" class="text-green-600 underline">кошик</a>.
12      </p>
13
14      <?php include 'includes/footer.php'; ?>

includes/header.php
01      <?php
02      session_start();
03      include 'includes/header.php';
04      ?>
05
06      <h1 class="text-2xl font-bold text-center mt-40">Ласкаво просимо до продовольчого магазину «Весна»</h1>
07      <p class="text-center mt-4 text-gray-600">
08          Оберіть 
09          <a href="products.php" class="text-green-600 underline">товари</a> 
10          для покупки або перегляньте 
11          <a href="cart.php" class="text-green-600 underline">кошик</a>.
12      </p>
13
14      <?php include 'includes/footer.php'; ?>
➜  smp-pzpi-23-2-malyshkin-andrii-lab3 git:(main) ✗ ./numlines includes/header.php 
01      <!DOCTYPE html>
02      <html lang="uk">
03      <head>
04          <meta charset="UTF-8">
05          <title>ПрМ «Весна»</title>
06          <link rel="shortcut icon" href="images/image.png" type="image/x-icon">
07          <script src="https://cdn.tailwindcss.com"></script>
08      </head>
09      <body class="bg-gray-100 text-gray-800 flex flex-col min-h-screen">
10      <?php $current_page = basename($_SERVER['PHP_SELF']); ?>
11      <header class="bg-white shadow py-4 px-8 flex justify-between items-center">
12          <a href="home.php" class="text-xl font-bold hover:underline">ПрМ «Весна»</a>
13          <nav class="space-x-6">
14              <a href="home.php"
15                 class="<?= $current_page === 'home.php' ? 'underline text-green-800' : 'text-green-600' ?> text-lg font-bold hover:underline">
16                  Home
17              </a>
18              <a href="products.php"
19                 class="<?= $current_page === 'products.php' ? 'underline text-green-800' : 'text-green-600' ?> text-lg font-bold hover:underline">
20                  Products
21              </a>
22              <a href="cart.php"
23                 class="<?= $current_page === 'cart.php' ? 'underline text-green-800' : 'text-green-600' ?> text-lg font-bold hover:underline">
24                  Cart
25              </a>
26          </nav>
27      </header>
28

includes/footer.php
01      <?php $current_page = basename($_SERVER['PHP_SELF']); ?>
02      </main>
03      <footer class="bg-white shadow p-6 mt-15 text-center">
04          <nav class="space-x-4">
05              <a href="home.php"
06                 class="<?= $current_page === 'home.php' ? 'underline text-gray-800' : 'text-gray-600' ?> hover:underline">
07                  Home
08              </a>
09              <a href="products.php"
10                 class="<?= $current_page === 'products.php' ? 'underline text-gray-800' : 'text-gray-600' ?> hover:underline">
11                  Products
12              </a>
13              <a href="cart.php"
14                 class="<?= $current_page === 'cart.php' ? 'underline text-gray-800' : 'text-gray-600' ?> hover:underline">
15                  Cart
16              </a>
17          </nav>
18          <p class="text-sm text-gray-400 mt-6">© 2025 Продовольчий магазин «Весна»</p>
19      </footer>
20      </body>
21      </html>

store/products.json
1       {
2           "1": { "name": "Молоко пастеризоване", "price": 12 },
3           "2": { "name": "Хліб чорний",          "price":  9 },
4           "3": { "name": "Сир білий",            "price": 21 },
5           "4": { "name": "Сметана 20%",          "price": 25 },
6           "5": { "name": "Кефір 1%",             "price": 19 },
7           "6": { "name": "Вода газована",        "price": 18 },
8           "7": { "name": "Печиво \"Весна\"",     "price": 14 }
9       }

products.php
01      <?php
02      session_start();
03
04      $products = json_decode(file_get_contents('store/products.json'), true);
05      $error = '';
06
07      if ($_SERVER['REQUEST_METHOD'] === 'POST') {
08          $quantities = $_POST['quantities'] ?? [];
09
10          $valid = false;
11
12          if (!isset($_SESSION['cart'])) {
13              $_SESSION['cart'] = [];
14          }
15
16          foreach ($quantities as $id => $count) {
17              if (is_numeric($count) && (int)$count > 0) {
18                  $valid = true;
19                  $id = (int)$id;
20                  $count = (int)$count;
21
22                  if (isset($_SESSION['cart'][$id])) {
23                      $_SESSION['cart'][$id]['count'] += $count;
24                  } else {
25                      $_SESSION['cart'][$id] = [
26                          'id' => $id,
27                          'name' => $products[$id]['name'],
28                          'price' => $products[$id]['price'],
29                          'count' => $count
30                      ];
31                  }
32              }
33          }
34
35          if ($valid) {
36              header("Location: cart.php");
37              exit;
38          } else {
39              $error = 'Перевірте будь ласка введені дані';
40          }
41      }
42
43      include 'includes/header.php';
44      ?>
45
46      <h1 class="text-2xl font-bold mb-6 text-center">Список товарів</h1>
47
48      <div class="flex w-full justify-center">
49          <?php if ($error): ?>
50              <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-xl mb-8 flex w-[30rem] justify-center">
51                  <?= htmlspecialchars($error) ?>
52              </div>
53          <?php endif; ?>
54      </div>
55
56      <form method="POST" class="flex flex-col gap-4 items-center">
57          <?php foreach ($products as $id => $product): ?>
58              <div class="bg-white w-[30rem] p-4 shadow rounded-xl flex justify-between items-center">
59                  <div>
60                      <p class="font-semibold"><?= htmlspecialchars($product['name']) ?></p>
61                      <p class="text-sm text-gray-600">Ціна: <?= $product['price'] ?> грн</p>
62                  </div>
63                  <div>
64                      <label for="quantity_<?= $id ?>" class="mr-2">Кількість:</label>
65                      <input 
66                          type="number" 
67                          name="quantities[<?= $id ?>]" 
68                          id="quantity_<?= $id ?>" min="0" 
69                          class="border rounded px-2 py-1 w-20" 
70                          value="0"
71                      >
72                  </div>
73              </div>
74          <?php endforeach; ?>
75
76          <button type="submit" class="flex mt-4 bg-green-600 text-white px-8 py-2 rounded-xl shadow hover:bg-green-700">
77              Додати в кошик
78          </button>
79      </form>
80
81      <?php include 'includes/footer.php'; ?>

cart.php
01      <?php
02      session_start();
03      include 'includes/header.php';
04
05      $cart = $_SESSION['cart'] ?? [];
06
07      if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['remove'])) {
08          $removeId = (int)$_POST['remove'];
09          if (isset($cart[$removeId])) {
10              unset($cart[$removeId]);
11              $_SESSION['cart'] = $cart;
12              header('Location: cart.php');
13              exit;
14          }
15      }
16      ?>
17
18      <h1 class="text-2xl font-bold mb-12 text-center">Кошик</h1>
19
20      <?php if (empty($cart)): ?>
21          <p class="text-center text-lg">Ваш кошик порожній. 
22              <a href="products.php" class="text-green-600 underline">
23                  Перейдіть до покупок
24              </a>
25          </p>
26      <?php else: ?>
27          <div class="overflow-x-auto px-80">
28              <table class="min-w-full bg-white shadow rounded-lg">
29                  <thead class="bg-gray-100">
30                      <tr>
31                          <th class="px-4 py-2 text-left">ID</th>
32                          <th class="px-4 py-2 text-left">Назва</th>
33                          <th class="px-4 py-2 text-left">Ціна</th>
34                          <th class="px-4 py-2 text-left">Кількість</th>
35                          <th class="px-4 py-2 text-left">Сума</th>
36                          <th class="px-4 py-2 text-left">Дії</th>
37                      </tr>
38                  </thead>
39                  <tbody>
40                      <?php
41                      $total = 0;
42                      foreach ($cart as $item):
43                          $sum = $item['price'] * $item['count'];
44                          $total += $sum;
45                      ?>
46                          <tr class="border-t">
47                              <td class="px-4 py-2"><?= $item['id'] ?></td>
48                              <td class="px-4 py-2"><?= htmlspecialchars($item['name']) ?></td>
49                              <td class="px-4 py-2"><?= $item['price'] ?> грн</td>
50                              <td class="px-4 py-2"><?= $item['count'] ?></td>
51                              <td class="px-4 py-2"><?= $sum ?> грн</td>
52                              <td class="px-4 py-2">
53                                  <form method="POST">
54                                      <input type="hidden" name="remove" value="<?= $item['id'] ?>">
55                                      <button type="submit" class="bg-red-500 text-white px-3 py-1 rounded-lg hover:bg-red-600">Видалити</button>
56                                  </form>
57                              </td>
58                          </tr>
59                      <?php endforeach; ?>
60                      <tr class="bg-gray-100 font-bold">
61                          <td class="px-4 py-2">Загальна сума:</td>
62                          <td></td>
63                          <td></td>
64                          <td></td>
65                          <td class="px-4 py-2"><?= $total ?> грн</td>
66                          <td></td>
67                      </tr>
68                  </tbody>
69              </table>
70          </div>
71          <div class="flex w-full justify-center gap-12 mt-20">
72              <a href="home.php" class="flex justify-center w-36 mt-4 bg-gray-400 text-white px-8 py-2 rounded-xl shadow hover:bg-gray-500">
73                  Скасувати
74              </a>
75              <a href="" class="flex w-36 justify-center mt-4 bg-green-600 text-white px-8 py-2 rounded-xl shadow hover:bg-green-700">
76                  Оплатити
77              </a>
78          </div>
79      <?php endif; ?>
80
81      <?php include 'includes/footer.php'; ?>